/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.siat.dex.server;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class DexParams extends org.apache.thrift.TUnion<DexParams, DexParams._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DexParams");
  private static final org.apache.thrift.protocol.TField WCPARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("wcparams", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DTRPARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("dtrparams", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DTCPARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("dtcparams", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField PGRANKPARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("pgrankparams", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField KMEANSPARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("kmeansparams", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WCPARAMS((short)1, "wcparams"),
    DTRPARAMS((short)2, "dtrparams"),
    DTCPARAMS((short)3, "dtcparams"),
    PGRANKPARAMS((short)4, "pgrankparams"),
    KMEANSPARAMS((short)5, "kmeansparams");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WCPARAMS
          return WCPARAMS;
        case 2: // DTRPARAMS
          return DTRPARAMS;
        case 3: // DTCPARAMS
          return DTCPARAMS;
        case 4: // PGRANKPARAMS
          return PGRANKPARAMS;
        case 5: // KMEANSPARAMS
          return KMEANSPARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WCPARAMS, new org.apache.thrift.meta_data.FieldMetaData("wcparams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "WCParams")));
    tmpMap.put(_Fields.DTRPARAMS, new org.apache.thrift.meta_data.FieldMetaData("dtrparams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "DTRParams")));
    tmpMap.put(_Fields.DTCPARAMS, new org.apache.thrift.meta_data.FieldMetaData("dtcparams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "DTCParams")));
    tmpMap.put(_Fields.PGRANKPARAMS, new org.apache.thrift.meta_data.FieldMetaData("pgrankparams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "PGRANKParams")));
    tmpMap.put(_Fields.KMEANSPARAMS, new org.apache.thrift.meta_data.FieldMetaData("kmeansparams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "KMEANSParams")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DexParams.class, metaDataMap);
  }

  public DexParams() {
    super();
  }

  public DexParams(_Fields setField, Object value) {
    super(setField, value);
  }

  public DexParams(DexParams other) {
    super(other);
  }
  public DexParams deepCopy() {
    return new DexParams(this);
  }

  public static DexParams wcparams(WCParams value) {
    DexParams x = new DexParams();
    x.setWcparams(value);
    return x;
  }

  public static DexParams dtrparams(DTRParams value) {
    DexParams x = new DexParams();
    x.setDtrparams(value);
    return x;
  }

  public static DexParams dtcparams(DTCParams value) {
    DexParams x = new DexParams();
    x.setDtcparams(value);
    return x;
  }

  public static DexParams pgrankparams(PGRANKParams value) {
    DexParams x = new DexParams();
    x.setPgrankparams(value);
    return x;
  }

  public static DexParams kmeansparams(KMEANSParams value) {
    DexParams x = new DexParams();
    x.setKmeansparams(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case WCPARAMS:
        if (value instanceof WCParams) {
          break;
        }
        throw new ClassCastException("Was expecting value of type WCParams for field 'wcparams', but got " + value.getClass().getSimpleName());
      case DTRPARAMS:
        if (value instanceof DTRParams) {
          break;
        }
        throw new ClassCastException("Was expecting value of type DTRParams for field 'dtrparams', but got " + value.getClass().getSimpleName());
      case DTCPARAMS:
        if (value instanceof DTCParams) {
          break;
        }
        throw new ClassCastException("Was expecting value of type DTCParams for field 'dtcparams', but got " + value.getClass().getSimpleName());
      case PGRANKPARAMS:
        if (value instanceof PGRANKParams) {
          break;
        }
        throw new ClassCastException("Was expecting value of type PGRANKParams for field 'pgrankparams', but got " + value.getClass().getSimpleName());
      case KMEANSPARAMS:
        if (value instanceof KMEANSParams) {
          break;
        }
        throw new ClassCastException("Was expecting value of type KMEANSParams for field 'kmeansparams', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case WCPARAMS:
          if (field.type == WCPARAMS_FIELD_DESC.type) {
            WCParams wcparams;
            wcparams = new WCParams();
            wcparams.read(iprot);
            return wcparams;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DTRPARAMS:
          if (field.type == DTRPARAMS_FIELD_DESC.type) {
            DTRParams dtrparams;
            dtrparams = new DTRParams();
            dtrparams.read(iprot);
            return dtrparams;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DTCPARAMS:
          if (field.type == DTCPARAMS_FIELD_DESC.type) {
            DTCParams dtcparams;
            dtcparams = new DTCParams();
            dtcparams.read(iprot);
            return dtcparams;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PGRANKPARAMS:
          if (field.type == PGRANKPARAMS_FIELD_DESC.type) {
            PGRANKParams pgrankparams;
            pgrankparams = new PGRANKParams();
            pgrankparams.read(iprot);
            return pgrankparams;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case KMEANSPARAMS:
          if (field.type == KMEANSPARAMS_FIELD_DESC.type) {
            KMEANSParams kmeansparams;
            kmeansparams = new KMEANSParams();
            kmeansparams.read(iprot);
            return kmeansparams;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case WCPARAMS:
        WCParams wcparams = (WCParams)value_;
        wcparams.write(oprot);
        return;
      case DTRPARAMS:
        DTRParams dtrparams = (DTRParams)value_;
        dtrparams.write(oprot);
        return;
      case DTCPARAMS:
        DTCParams dtcparams = (DTCParams)value_;
        dtcparams.write(oprot);
        return;
      case PGRANKPARAMS:
        PGRANKParams pgrankparams = (PGRANKParams)value_;
        pgrankparams.write(oprot);
        return;
      case KMEANSPARAMS:
        KMEANSParams kmeansparams = (KMEANSParams)value_;
        kmeansparams.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case WCPARAMS:
          WCParams wcparams;
          wcparams = new WCParams();
          wcparams.read(iprot);
          return wcparams;
        case DTRPARAMS:
          DTRParams dtrparams;
          dtrparams = new DTRParams();
          dtrparams.read(iprot);
          return dtrparams;
        case DTCPARAMS:
          DTCParams dtcparams;
          dtcparams = new DTCParams();
          dtcparams.read(iprot);
          return dtcparams;
        case PGRANKPARAMS:
          PGRANKParams pgrankparams;
          pgrankparams = new PGRANKParams();
          pgrankparams.read(iprot);
          return pgrankparams;
        case KMEANSPARAMS:
          KMEANSParams kmeansparams;
          kmeansparams = new KMEANSParams();
          kmeansparams.read(iprot);
          return kmeansparams;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case WCPARAMS:
        WCParams wcparams = (WCParams)value_;
        wcparams.write(oprot);
        return;
      case DTRPARAMS:
        DTRParams dtrparams = (DTRParams)value_;
        dtrparams.write(oprot);
        return;
      case DTCPARAMS:
        DTCParams dtcparams = (DTCParams)value_;
        dtcparams.write(oprot);
        return;
      case PGRANKPARAMS:
        PGRANKParams pgrankparams = (PGRANKParams)value_;
        pgrankparams.write(oprot);
        return;
      case KMEANSPARAMS:
        KMEANSParams kmeansparams = (KMEANSParams)value_;
        kmeansparams.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case WCPARAMS:
        return WCPARAMS_FIELD_DESC;
      case DTRPARAMS:
        return DTRPARAMS_FIELD_DESC;
      case DTCPARAMS:
        return DTCPARAMS_FIELD_DESC;
      case PGRANKPARAMS:
        return PGRANKPARAMS_FIELD_DESC;
      case KMEANSPARAMS:
        return KMEANSPARAMS_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public WCParams getWcparams() {
    if (getSetField() == _Fields.WCPARAMS) {
      return (WCParams)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'wcparams' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setWcparams(WCParams value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.WCPARAMS;
    value_ = value;
  }

  public DTRParams getDtrparams() {
    if (getSetField() == _Fields.DTRPARAMS) {
      return (DTRParams)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'dtrparams' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDtrparams(DTRParams value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DTRPARAMS;
    value_ = value;
  }

  public DTCParams getDtcparams() {
    if (getSetField() == _Fields.DTCPARAMS) {
      return (DTCParams)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'dtcparams' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDtcparams(DTCParams value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DTCPARAMS;
    value_ = value;
  }

  public PGRANKParams getPgrankparams() {
    if (getSetField() == _Fields.PGRANKPARAMS) {
      return (PGRANKParams)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'pgrankparams' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPgrankparams(PGRANKParams value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PGRANKPARAMS;
    value_ = value;
  }

  public KMEANSParams getKmeansparams() {
    if (getSetField() == _Fields.KMEANSPARAMS) {
      return (KMEANSParams)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'kmeansparams' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setKmeansparams(KMEANSParams value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.KMEANSPARAMS;
    value_ = value;
  }

  public boolean isSetWcparams() {
    return setField_ == _Fields.WCPARAMS;
  }


  public boolean isSetDtrparams() {
    return setField_ == _Fields.DTRPARAMS;
  }


  public boolean isSetDtcparams() {
    return setField_ == _Fields.DTCPARAMS;
  }


  public boolean isSetPgrankparams() {
    return setField_ == _Fields.PGRANKPARAMS;
  }


  public boolean isSetKmeansparams() {
    return setField_ == _Fields.KMEANSPARAMS;
  }


  public boolean equals(Object other) {
    if (other instanceof DexParams) {
      return equals((DexParams)other);
    } else {
      return false;
    }
  }

  public boolean equals(DexParams other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(DexParams other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
