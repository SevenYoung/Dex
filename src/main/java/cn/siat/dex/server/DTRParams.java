/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.siat.dex.server;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-13")
public class DTRParams implements org.apache.thrift.TBase<DTRParams, DTRParams._Fields>, java.io.Serializable, Cloneable, Comparable<DTRParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DTRParams");

  private static final org.apache.thrift.protocol.TField IMPURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("impurity", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_DEPTH_FIELD_DESC = new org.apache.thrift.protocol.TField("maxDepth", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_BINS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxBins", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitions", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DTRParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DTRParamsTupleSchemeFactory());
  }

  public String impurity; // required
  public int maxDepth; // required
  public int maxBins; // required
  public int partitions; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IMPURITY((short)1, "impurity"),
    MAX_DEPTH((short)2, "maxDepth"),
    MAX_BINS((short)3, "maxBins"),
    PARTITIONS((short)4, "partitions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IMPURITY
          return IMPURITY;
        case 2: // MAX_DEPTH
          return MAX_DEPTH;
        case 3: // MAX_BINS
          return MAX_BINS;
        case 4: // PARTITIONS
          return PARTITIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXDEPTH_ISSET_ID = 0;
  private static final int __MAXBINS_ISSET_ID = 1;
  private static final int __PARTITIONS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARTITIONS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IMPURITY, new org.apache.thrift.meta_data.FieldMetaData("impurity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_DEPTH, new org.apache.thrift.meta_data.FieldMetaData("maxDepth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_BINS, new org.apache.thrift.meta_data.FieldMetaData("maxBins", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("partitions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DTRParams.class, metaDataMap);
  }

  public DTRParams() {
  }

  public DTRParams(
    String impurity,
    int maxDepth,
    int maxBins)
  {
    this();
    this.impurity = impurity;
    this.maxDepth = maxDepth;
    setMaxDepthIsSet(true);
    this.maxBins = maxBins;
    setMaxBinsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DTRParams(DTRParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetImpurity()) {
      this.impurity = other.impurity;
    }
    this.maxDepth = other.maxDepth;
    this.maxBins = other.maxBins;
    this.partitions = other.partitions;
  }

  public DTRParams deepCopy() {
    return new DTRParams(this);
  }

  @Override
  public void clear() {
    this.impurity = null;
    setMaxDepthIsSet(false);
    this.maxDepth = 0;
    setMaxBinsIsSet(false);
    this.maxBins = 0;
    setPartitionsIsSet(false);
    this.partitions = 0;
  }

  public String getImpurity() {
    return this.impurity;
  }

  public DTRParams setImpurity(String impurity) {
    this.impurity = impurity;
    return this;
  }

  public void unsetImpurity() {
    this.impurity = null;
  }

  /** Returns true if field impurity is set (has been assigned a value) and false otherwise */
  public boolean isSetImpurity() {
    return this.impurity != null;
  }

  public void setImpurityIsSet(boolean value) {
    if (!value) {
      this.impurity = null;
    }
  }

  public int getMaxDepth() {
    return this.maxDepth;
  }

  public DTRParams setMaxDepth(int maxDepth) {
    this.maxDepth = maxDepth;
    setMaxDepthIsSet(true);
    return this;
  }

  public void unsetMaxDepth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXDEPTH_ISSET_ID);
  }

  /** Returns true if field maxDepth is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxDepth() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXDEPTH_ISSET_ID);
  }

  public void setMaxDepthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXDEPTH_ISSET_ID, value);
  }

  public int getMaxBins() {
    return this.maxBins;
  }

  public DTRParams setMaxBins(int maxBins) {
    this.maxBins = maxBins;
    setMaxBinsIsSet(true);
    return this;
  }

  public void unsetMaxBins() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXBINS_ISSET_ID);
  }

  /** Returns true if field maxBins is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxBins() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXBINS_ISSET_ID);
  }

  public void setMaxBinsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXBINS_ISSET_ID, value);
  }

  public int getPartitions() {
    return this.partitions;
  }

  public DTRParams setPartitions(int partitions) {
    this.partitions = partitions;
    setPartitionsIsSet(true);
    return this;
  }

  public void unsetPartitions() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITIONS_ISSET_ID);
  }

  /** Returns true if field partitions is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitions() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTITIONS_ISSET_ID);
  }

  public void setPartitionsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITIONS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IMPURITY:
      if (value == null) {
        unsetImpurity();
      } else {
        setImpurity((String)value);
      }
      break;

    case MAX_DEPTH:
      if (value == null) {
        unsetMaxDepth();
      } else {
        setMaxDepth((Integer)value);
      }
      break;

    case MAX_BINS:
      if (value == null) {
        unsetMaxBins();
      } else {
        setMaxBins((Integer)value);
      }
      break;

    case PARTITIONS:
      if (value == null) {
        unsetPartitions();
      } else {
        setPartitions((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IMPURITY:
      return getImpurity();

    case MAX_DEPTH:
      return getMaxDepth();

    case MAX_BINS:
      return getMaxBins();

    case PARTITIONS:
      return getPartitions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IMPURITY:
      return isSetImpurity();
    case MAX_DEPTH:
      return isSetMaxDepth();
    case MAX_BINS:
      return isSetMaxBins();
    case PARTITIONS:
      return isSetPartitions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DTRParams)
      return this.equals((DTRParams)that);
    return false;
  }

  public boolean equals(DTRParams that) {
    if (that == null)
      return false;

    boolean this_present_impurity = true && this.isSetImpurity();
    boolean that_present_impurity = true && that.isSetImpurity();
    if (this_present_impurity || that_present_impurity) {
      if (!(this_present_impurity && that_present_impurity))
        return false;
      if (!this.impurity.equals(that.impurity))
        return false;
    }

    boolean this_present_maxDepth = true;
    boolean that_present_maxDepth = true;
    if (this_present_maxDepth || that_present_maxDepth) {
      if (!(this_present_maxDepth && that_present_maxDepth))
        return false;
      if (this.maxDepth != that.maxDepth)
        return false;
    }

    boolean this_present_maxBins = true;
    boolean that_present_maxBins = true;
    if (this_present_maxBins || that_present_maxBins) {
      if (!(this_present_maxBins && that_present_maxBins))
        return false;
      if (this.maxBins != that.maxBins)
        return false;
    }

    boolean this_present_partitions = true && this.isSetPartitions();
    boolean that_present_partitions = true && that.isSetPartitions();
    if (this_present_partitions || that_present_partitions) {
      if (!(this_present_partitions && that_present_partitions))
        return false;
      if (this.partitions != that.partitions)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_impurity = true && (isSetImpurity());
    list.add(present_impurity);
    if (present_impurity)
      list.add(impurity);

    boolean present_maxDepth = true;
    list.add(present_maxDepth);
    if (present_maxDepth)
      list.add(maxDepth);

    boolean present_maxBins = true;
    list.add(present_maxBins);
    if (present_maxBins)
      list.add(maxBins);

    boolean present_partitions = true && (isSetPartitions());
    list.add(present_partitions);
    if (present_partitions)
      list.add(partitions);

    return list.hashCode();
  }

  @Override
  public int compareTo(DTRParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetImpurity()).compareTo(other.isSetImpurity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImpurity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.impurity, other.impurity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxDepth()).compareTo(other.isSetMaxDepth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxDepth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxDepth, other.maxDepth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxBins()).compareTo(other.isSetMaxBins());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxBins()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxBins, other.maxBins);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartitions()).compareTo(other.isSetPartitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitions, other.partitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DTRParams(");
    boolean first = true;

    sb.append("impurity:");
    if (this.impurity == null) {
      sb.append("null");
    } else {
      sb.append(this.impurity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxDepth:");
    sb.append(this.maxDepth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxBins:");
    sb.append(this.maxBins);
    first = false;
    if (isSetPartitions()) {
      if (!first) sb.append(", ");
      sb.append("partitions:");
      sb.append(this.partitions);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (impurity == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'impurity' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'maxDepth' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'maxBins' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DTRParamsStandardSchemeFactory implements SchemeFactory {
    public DTRParamsStandardScheme getScheme() {
      return new DTRParamsStandardScheme();
    }
  }

  private static class DTRParamsStandardScheme extends StandardScheme<DTRParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DTRParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IMPURITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.impurity = iprot.readString();
              struct.setImpurityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_DEPTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxDepth = iprot.readI32();
              struct.setMaxDepthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_BINS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxBins = iprot.readI32();
              struct.setMaxBinsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partitions = iprot.readI32();
              struct.setPartitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMaxDepth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxDepth' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMaxBins()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxBins' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DTRParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.impurity != null) {
        oprot.writeFieldBegin(IMPURITY_FIELD_DESC);
        oprot.writeString(struct.impurity);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_DEPTH_FIELD_DESC);
      oprot.writeI32(struct.maxDepth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_BINS_FIELD_DESC);
      oprot.writeI32(struct.maxBins);
      oprot.writeFieldEnd();
      if (struct.isSetPartitions()) {
        oprot.writeFieldBegin(PARTITIONS_FIELD_DESC);
        oprot.writeI32(struct.partitions);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DTRParamsTupleSchemeFactory implements SchemeFactory {
    public DTRParamsTupleScheme getScheme() {
      return new DTRParamsTupleScheme();
    }
  }

  private static class DTRParamsTupleScheme extends TupleScheme<DTRParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DTRParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.impurity);
      oprot.writeI32(struct.maxDepth);
      oprot.writeI32(struct.maxBins);
      BitSet optionals = new BitSet();
      if (struct.isSetPartitions()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetPartitions()) {
        oprot.writeI32(struct.partitions);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DTRParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.impurity = iprot.readString();
      struct.setImpurityIsSet(true);
      struct.maxDepth = iprot.readI32();
      struct.setMaxDepthIsSet(true);
      struct.maxBins = iprot.readI32();
      struct.setMaxBinsIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.partitions = iprot.readI32();
        struct.setPartitionsIsSet(true);
      }
    }
  }

}

